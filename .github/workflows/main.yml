name: OWASP ZAP Scan

on:
  workflow_dispatch: # Permite la ejecución manual
  push:
    branches: [ main ] # Ejecuta en pushes a la rama main
  pull_request:
    branches: [ main ] # Ejecuta en pull requests a la rama main

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan Website with OWASP ZAP
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run ZAP Scan
        # Documentación de la imagen Docker de ZAP: https://www.zaproxy.org/docs/docker/
        # Este comando ejecuta un escaneo base pasivo y activo contra la URL especificada.
        # Puedes personalizar los parámetros de ZAP según tus necesidades.
        # '-t' especifica la URL objetivo.
        # '-g gen.conf' genera un archivo de configuración (opcional).
        # '-r report.html' genera un informe en formato HTML.
        # '--' se utiliza para pasar argumentos directamente al script zap.sh dentro del contenedor.
        run: |
          mkdir -p ./zap/wrk
          docker run --rm \
            -v $(pwd)/zap/wrk:/zap/wrk:rw \
            zaproxy/zap-stable zap-baseline.py \
            -t https://www.example.com \
            -g gen.conf \
            -r report.html || echo "ZAP scan found vulnerabilities or an error occurred"
          # El '|| echo' es para evitar que el workflow falle si ZAP encuentra vulnerabilidades (exit code > 0)

      - name: Upload ZAP Report
        # Sube el informe generado como un artefacto del workflow
        uses: actions/upload-artifact@v4
        with:
          name: ZAP-Report
          path: ./zap/wrk/report.html
          retention-days: 7 # Opcional: cuántos días mantener el artefacto
