name: OWASP ZAP Scan

on:
  workflow_dispatch: # Permite la ejecución manual
  push:
    branches: [ main ] # Ejecuta en pushes a la rama main
  pull_request:
    branches: [ main ] # Ejecuta en pull requests a la rama main

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    name: Scan Website with OWASP ZAP
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create ZAP directory and Set Permissions
        run: |
          mkdir -p ./zap/wrk
          sudo chmod -R 777 ./zap/wrk
          # Explicación:
          # mkdir -p ./zap/wrk: Crea el directorio si no existe.
          # sudo chmod -R 777 ./zap/wrk: Cambia los permisos del directorio ./zap/wrk
          # de forma recursiva (-R) para que cualquier usuario (777 - lectura, escritura, ejecución para todos)
          # pueda escribir en él. Esto incluye al usuario 'zap' (UID 1000) dentro del contenedor Docker.

      - name: Run ZAP Scan
        # Documentación de la imagen Docker de ZAP: https://www.zaproxy.org/docs/docker/
        run: |
          docker run --rm \
            -v $(pwd)/zap/wrk:/zap/wrk:rw \
            zaproxy/zap-stable zap-baseline.py \
            -t https://www.example.com \
            -g gen.conf \
            -w report.md || echo "ZAP scan found vulnerabilities or an error occurred. Exit code: $?"
          # El '|| echo' es para evitar que el workflow falle si ZAP encuentra vulnerabilidades (exit code > 0)
          # Se ha añadido "$?" para mostrar el código de salida de ZAP, que puede ser útil para depurar.

      - name: Upload ZAP Report
        # Sube el informe generado como un artefacto del workflow
        # Este paso se ejecutará incluso si el paso anterior tiene '|| echo ...'
        if: always() # Asegura que este paso se ejecute siempre, incluso si el escaneo "falla" (encuentra vulnerabilidades)
        uses: actions/upload-artifact@v4
        with:
          name: ZAP-Report
          path: ./zap/wrk/report.md
          retention-days: 7 # Opcional: cuántos días mantener el artefacto
